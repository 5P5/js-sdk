{"version":3,"file":"pocketbase.cjs.js","sources":["../src/ClientResponseError.ts","../src/stores/utils/cookie.ts","../src/stores/utils/jwt.ts","../src/stores/BaseAuthStore.ts","../src/stores/LocalAuthStore.ts","../src/services/utils/BaseService.ts","../src/services/SettingsService.ts","../src/services/utils/CrudService.ts","../src/services/utils/legacy.ts","../src/services/AdminService.ts","../src/services/RecordService.ts","../src/services/CollectionService.ts","../src/services/LogService.ts","../src/services/RealtimeService.ts","../src/services/HealthService.ts","../src/services/FileService.ts","../src/services/BackupService.ts","../src/Client.ts"],"sourcesContent":["/**\n * ClientResponseError is a custom Error class that is intended to wrap\n * and normalize any error thrown by `Client.send()`.\n */\nexport class ClientResponseError extends Error {\n    url: string                    = '';\n    status: number                 = 0;\n    response: {[key: string]: any} = {};\n    isAbort:  boolean              = false;\n    originalError: any             = null;\n\n    constructor(errData?: any) {\n        super(\"ClientResponseError\");\n\n        // Set the prototype explicitly.\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, ClientResponseError.prototype);\n\n        if (errData !== null && typeof errData === 'object') {\n            this.url           = typeof errData.url === 'string' ? errData.url : '';\n            this.status        = typeof errData.status === 'number' ? errData.status : 0;\n            this.isAbort       = !!errData.isAbort;\n            this.originalError = errData.originalError;\n\n            if (errData.response !== null && typeof errData.response === 'object')  {\n                this.response =  errData.response;\n            } else if (errData.data !== null && typeof errData.data === 'object')  {\n                this.response =  errData.data;\n            } else {\n                this.response =  {};\n            }\n        }\n\n        if (!this.originalError && !(errData instanceof ClientResponseError)) {\n            this.originalError = errData;\n        }\n\n        if (typeof DOMException !== 'undefined' && errData instanceof DOMException) {\n            this.isAbort = true;\n        }\n\n        this.name = \"ClientResponseError \" + this.status;\n        this.message = this.response?.message;\n        if (!this.message) {\n            if (this.isAbort) {\n                this.message = 'The request was autocancelled. You can find more info in https://github.com/pocketbase/js-sdk#auto-cancellation.';\n            } else if (this.originalError?.cause?.message?.includes(\"ECONNREFUSED ::1\")) {\n                this.message = 'Failed to connect to the PocketBase server. Try changing the SDK URL from localhost to 127.0.0.1 (https://github.com/pocketbase/js-sdk/issues/21).';\n            } else {\n                this.message = 'Something went wrong while processing your request.';\n            }\n        }\n    }\n\n    /**\n     * Alias for `this.response` to preserve the backward compatibility.\n     */\n    get data() {\n        return this.response;\n    }\n\n    /**\n     * Make a POJO's copy of the current error class instance.\n     * @see https://github.com/vuex-orm/vuex-orm/issues/255\n     */\n    toJSON() {\n        return { ...this };\n    }\n}\n","/**\n * -------------------------------------------------------------------\n * Simple cookie parse and serialize utilities mostly based on the\n * node module https://github.com/jshttp/cookie.\n * -------------------------------------------------------------------\n */\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\nconst fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\nexport interface ParseOptions{\n    decode?: (val: string) => string,\n}\n\n/**\n* Parses the given cookie header string into an object\n* The object has the various cookies as keys(names) => values\n*/\nexport function cookieParse(str: string, options?: ParseOptions): { [key: string]: any }  {\n    const result: { [key: string]: any } = {};\n\n    if (typeof str !== 'string') {\n        return result;\n    }\n\n    const opt    = Object.assign({}, options || {});\n    const decode = opt.decode || defaultDecode;\n\n    let index = 0;\n    while (index < str.length) {\n        const eqIdx = str.indexOf('=', index);\n\n        // no more cookie pairs\n        if (eqIdx === -1) {\n            break;\n        }\n\n        let endIdx = str.indexOf(';', index);\n\n        if (endIdx === -1) {\n            endIdx = str.length;\n        } else if (endIdx < eqIdx) {\n            // backtrack on prior semicolon\n            index = str.lastIndexOf(';', eqIdx - 1) + 1;\n            continue;\n        }\n\n        const key = str.slice(index, eqIdx).trim();\n\n        // only assign once\n        if (undefined === result[key]) {\n            let val = str.slice(eqIdx + 1, endIdx).trim();\n\n            // quoted values\n            if (val.charCodeAt(0) === 0x22) {\n                val = val.slice(1, -1);\n            }\n\n            try {\n                result[key] = decode(val);\n            } catch (_) {\n                result[key] = val; // no decoding\n            }\n        }\n\n        index = endIdx + 1;\n    }\n\n    return result;\n};\n\nexport interface SerializeOptions {\n    encode?:   (val: string | number | boolean) => string,\n    maxAge?:   number,\n    domain?:   string,\n    path?:     string,\n    expires?:  Date,\n    httpOnly?: boolean,\n    secure?:   boolean,\n    priority?: string,\n    sameSite?: boolean|string,\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * ```js\n * cookieSerialize('foo', 'bar', { httpOnly: true }) // \"foo=bar; httpOnly\"\n * ```\n */\nexport function cookieSerialize(name: string, val: string, options?: SerializeOptions): string {\n    const opt    = Object.assign({}, options || {});\n    const encode = opt.encode || defaultEncode;\n\n    if (!fieldContentRegExp.test(name)) {\n        throw new TypeError('argument name is invalid');\n    }\n\n    const value = encode(val);\n\n    if (value && !fieldContentRegExp.test(value)) {\n        throw new TypeError('argument val is invalid');\n    }\n\n    let result = name + '=' + value;\n\n    if (opt.maxAge != null) {\n        const maxAge = opt.maxAge - 0;\n\n        if (isNaN(maxAge) || !isFinite(maxAge)) {\n            throw new TypeError('option maxAge is invalid');\n        }\n\n        result += '; Max-Age=' + Math.floor(maxAge);\n    }\n\n    if (opt.domain) {\n        if (!fieldContentRegExp.test(opt.domain)) {\n            throw new TypeError('option domain is invalid');\n        }\n\n        result += '; Domain=' + opt.domain;\n    }\n\n    if (opt.path) {\n        if (!fieldContentRegExp.test(opt.path)) {\n            throw new TypeError('option path is invalid');\n        }\n\n        result += '; Path=' + opt.path;\n    }\n\n    if (opt.expires) {\n        if (!isDate(opt.expires) || isNaN(opt.expires.valueOf())) {\n            throw new TypeError('option expires is invalid');\n        }\n\n        result += '; Expires=' + opt.expires.toUTCString();\n    }\n\n    if (opt.httpOnly) {\n        result += '; HttpOnly';\n    }\n\n    if (opt.secure) {\n        result += '; Secure';\n    }\n\n    if (opt.priority) {\n        const priority = typeof opt.priority === 'string' ? opt.priority.toLowerCase() : opt.priority;\n\n        switch (priority) {\n            case 'low':\n                result += '; Priority=Low';\n                break;\n            case 'medium':\n                result += '; Priority=Medium';\n                break;\n            case 'high':\n                result += '; Priority=High';\n                break;\n            default:\n                throw new TypeError('option priority is invalid');\n        }\n    }\n\n    if (opt.sameSite) {\n        const sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n        switch (sameSite) {\n            case true:\n                result += '; SameSite=Strict';\n                break;\n            case 'lax':\n                result += '; SameSite=Lax';\n                break;\n            case 'strict':\n                result += '; SameSite=Strict';\n                break;\n            case 'none':\n                result += '; SameSite=None';\n                break;\n            default:\n                throw new TypeError('option sameSite is invalid');\n        }\n    }\n\n    return result;\n};\n\n/**\n * Default URL-decode string value function.\n * Optimized to skip native call when no `%`.\n */\nfunction defaultDecode(val: string): string {\n    return val.indexOf('%') !== -1\n        ? decodeURIComponent(val)\n        : val;\n}\n\n/**\n * Default URL-encode value function.\n */\nfunction defaultEncode(val: string | number | boolean): string {\n    return encodeURIComponent(val);\n}\n\n/**\n * Determines if value is a Date.\n */\nfunction isDate(val: any): boolean {\n    return (\n        Object.prototype.toString.call(val) === '[object Date]' ||\n        val instanceof Date\n    );\n}\n","let atobPolyfill: Function;\nif (typeof atob === 'function') {\n    atobPolyfill = atob\n} else {\n    /**\n     * The code was extracted from:\n     * https://github.com/davidchambers/Base64.js\n     */\n    atobPolyfill = (input: any) => {\n        const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n        let str = String(input).replace(/=+$/, \"\");\n        if (str.length % 4 == 1) {\n            throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n        }\n\n        for (\n            // initialize result and counters\n            var bc = 0, bs, buffer, idx = 0, output = \"\";\n            // get next character\n            (buffer = str.charAt(idx++));\n            // character found in table? initialize bit storage and add its ascii value;\n            ~buffer &&\n            ((bs = bc % 4 ? (bs as any) * 64 + buffer : buffer),\n                // and if not first of each 4 characters,\n                // convert the first 8 bits to one ascii character\n                bc++ % 4) ?\n            (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6)))) :\n            0\n        ) {\n            // try to find character in table (0-63, not found => -1)\n            buffer = chars.indexOf(buffer);\n        }\n\n        return output;\n    };\n}\n\n/**\n * Returns JWT token's payload data.\n */\nexport function getTokenPayload(token: string): { [key: string]: any } {\n    if (token) {\n        try {\n            const encodedPayload = decodeURIComponent(atobPolyfill(token.split('.')[1]).split('').map(function (c: string) {\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            }).join(''));\n\n            return JSON.parse(encodedPayload) || {};\n        } catch (e) {\n        }\n    }\n\n    return {};\n}\n\n/**\n * Checks whether a JWT token is expired or not.\n * Tokens without `exp` payload key are considered valid.\n * Tokens with empty payload (eg. invalid token strings) are considered expired.\n *\n * @param token The token to check.\n * @param [expirationThreshold] Time in seconds that will be subtracted from the token `exp` property.\n */\nexport function isTokenExpired(token: string, expirationThreshold = 0): boolean {\n    let payload = getTokenPayload(token);\n\n    if (\n        Object.keys(payload).length > 0 &&\n        (!payload.exp || (payload.exp - expirationThreshold) > (Date.now() / 1000))\n    ) {\n        return false;\n    }\n\n    return true;\n}\n","import { cookieParse, cookieSerialize, SerializeOptions } from '@/stores/utils/cookie';\nimport { isTokenExpired, getTokenPayload } from '@/stores/utils/jwt';\nimport { RecordModel, AdminModel }  from '@/services/utils/dtos';\n\nexport type AuthModel = RecordModel|AdminModel|null;\n\nexport type OnStoreChangeFunc = (token: string, model: AuthModel) => void;\n\nconst defaultCookieKey = 'pb_auth';\n\n/**\n * Base AuthStore class that is intended to be extended by all other\n * PocketBase AuthStore implementations.\n */\nexport abstract class BaseAuthStore {\n    protected baseToken: string = '';\n    protected baseModel: AuthModel = null;\n\n    private _onChangeCallbacks: Array<OnStoreChangeFunc> = [];\n\n    /**\n     * Retrieves the stored token (if any).\n     */\n    get token(): string {\n        return this.baseToken;\n    }\n\n    /**\n     * Retrieves the stored model data (if any).\n     */\n    get model(): AuthModel {\n        return this.baseModel;\n    }\n\n    /**\n     * Loosely checks if the store has valid token (aka. existing and unexpired exp claim).\n     */\n    get isValid(): boolean {\n        return !isTokenExpired(this.token);\n    }\n\n    /**\n     * Saves the provided new token and model data in the auth store.\n     */\n    save(token: string, model?: AuthModel): void {\n        this.baseToken = token || '';\n        this.baseModel = model || null;\n\n        this.triggerChange();\n    }\n\n    /**\n     * Removes the stored token and model data form the auth store.\n     */\n    clear(): void {\n        this.baseToken = '';\n        this.baseModel = null;\n        this.triggerChange();\n    }\n\n    /**\n     * Parses the provided cookie string and updates the store state\n     * with the cookie's token and model data.\n     *\n     * NB! This function doesn't validate the token or its data.\n     * Usually this isn't a concern if you are interacting only with the\n     * PocketBase API because it has the proper server-side security checks in place,\n     * but if you are using the store `isValid` state for permission controls\n     * in a node server (eg. SSR), then it is recommended to call `authRefresh()`\n     * after loading the cookie to ensure an up-to-date token and model state.\n     * For example:\n     *\n     * ```js\n     * pb.authStore.loadFromCookie(\"cookie string...\");\n     *\n     * try {\n     *     // get an up-to-date auth store state by veryfing and refreshing the loaded auth model (if any)\n     *     pb.authStore.isValid && await pb.collection('users').authRefresh();\n     * } catch (_) {\n     *     // clear the auth store on failed refresh\n     *     pb.authStore.clear();\n     * }\n     * ```\n     */\n    loadFromCookie(cookie: string, key = defaultCookieKey): void {\n        const rawData = cookieParse(cookie || '')[key] || '';\n\n        let data: { [key: string]: any } = {};\n        try {\n            data = JSON.parse(rawData);\n            // normalize\n            if (typeof data === null || typeof data !== 'object' || Array.isArray(data)) {\n                data = {};\n            }\n        } catch (_) {}\n\n        this.save(data.token || '', data.model || null);\n    }\n\n    /**\n     * Exports the current store state as cookie string.\n     *\n     * By default the following optional attributes are added:\n     * - Secure\n     * - HttpOnly\n     * - SameSite=Strict\n     * - Path=/\n     * - Expires={the token expiration date}\n     *\n     * NB! If the generated cookie exceeds 4096 bytes, this method will\n     * strip the model data to the bare minimum to try to fit within the\n     * recommended size in https://www.rfc-editor.org/rfc/rfc6265#section-6.1.\n     */\n    exportToCookie(options?: SerializeOptions, key = defaultCookieKey): string {\n        const defaultOptions: SerializeOptions = {\n            secure:   true,\n            sameSite: true,\n            httpOnly: true,\n            path:     \"/\",\n        };\n\n        // extract the token expiration date\n        const payload = getTokenPayload(this.token);\n        if (payload?.exp) {\n            defaultOptions.expires = new Date(payload.exp * 1000);\n        } else {\n            defaultOptions.expires = new Date('1970-01-01');\n        }\n\n        // merge with the user defined options\n        options = Object.assign({}, defaultOptions, options);\n\n        const rawData = {\n            token: this.token,\n            model: this.model ? JSON.parse(JSON.stringify(this.model)) : null,\n        };\n\n        let result = cookieSerialize(key, JSON.stringify(rawData), options);\n\n        const resultLength = typeof Blob !== 'undefined' ?\n            (new Blob([result])).size : result.length;\n\n        // strip down the model data to the bare minimum\n        if (rawData.model && resultLength > 4096) {\n            rawData.model = {id: rawData?.model?.id, email: rawData?.model?.email};\n            const extraProps = [\"collectionId\", \"username\", \"verified\"];\n            for (const prop in this.model) {\n                if (extraProps.includes(prop)) {\n                    rawData.model[prop] = this.model[prop];\n                }\n            }\n            result = cookieSerialize(key, JSON.stringify(rawData), options);\n        }\n\n        return result;\n    }\n\n    /**\n     * Register a callback function that will be called on store change.\n     *\n     * You can set the `fireImmediately` argument to true in order to invoke\n     * the provided callback right after registration.\n     *\n     * Returns a removal function that you could call to \"unsubscribe\" from the changes.\n     */\n    onChange(callback: OnStoreChangeFunc, fireImmediately = false): () => void {\n        this._onChangeCallbacks.push(callback);\n\n        if (fireImmediately) {\n            callback(this.token, this.model);\n        }\n\n        return () => {\n            for (let i = this._onChangeCallbacks.length - 1; i >= 0; i--) {\n                if (this._onChangeCallbacks[i] == callback) {\n                    delete this._onChangeCallbacks[i];    // removes the function reference\n                    this._onChangeCallbacks.splice(i, 1); // reindex the array\n                    return;\n                }\n            }\n        }\n    }\n\n    protected triggerChange(): void {\n        for (const callback of this._onChangeCallbacks) {\n            callback && callback(this.token, this.model);\n        }\n    }\n}\n","import { BaseAuthStore, AuthModel } from '@/stores/BaseAuthStore';\n\n/**\n * The default token store for browsers with auto fallback\n * to runtime/memory if local storage is undefined (eg. in node env).\n */\nexport class LocalAuthStore extends BaseAuthStore {\n    private storageFallback: { [key: string]: any } = {};\n    private storageKey: string\n\n    constructor(storageKey = \"pocketbase_auth\") {\n        super();\n\n        this.storageKey = storageKey;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get token(): string {\n        const data = this._storageGet(this.storageKey) || {};\n\n        return data.token || '';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get model(): AuthModel {\n        const data = this._storageGet(this.storageKey) || {};\n\n        if (\n            data === null ||\n            typeof data !== 'object' ||\n            data.model === null ||\n            typeof data.model !== 'object'\n        ) {\n            return null;\n        }\n\n        return data.model\n    }\n\n    /**\n     * @inheritdoc\n     */\n    save(token: string, model?: AuthModel) {\n        this._storageSet(this.storageKey, {\n            'token': token,\n            'model': model,\n        });\n\n        super.save(token, model);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clear() {\n        this._storageRemove(this.storageKey);\n\n        super.clear();\n    }\n\n    // ---------------------------------------------------------------\n    // Internal helpers:\n    // ---------------------------------------------------------------\n\n    /**\n     * Retrieves `key` from the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageGet(key: string): any {\n        if (typeof window !== 'undefined' && window?.localStorage) {\n            const rawValue = window.localStorage.getItem(key) || '';\n            try {\n                return JSON.parse(rawValue);\n            } catch (e) { // not a json\n                return rawValue;\n            }\n        }\n\n        // fallback\n        return this.storageFallback[key];\n    }\n\n    /**\n     * Stores a new data in the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageSet(key: string, value: any) {\n        if (typeof window !== 'undefined' && window?.localStorage) {\n            // store in local storage\n            let normalizedVal = value;\n            if (typeof value !== 'string') {\n                normalizedVal = JSON.stringify(value);\n            }\n            window.localStorage.setItem(key, normalizedVal);\n        } else {\n            // store in fallback\n            this.storageFallback[key] = value;\n        }\n    }\n\n    /**\n     * Removes `key` from the browser's local storage and the runtime/memory.\n     */\n    private _storageRemove(key: string) {\n        // delete from local storage\n        if (typeof window !== 'undefined' && window?.localStorage) {\n            window.localStorage?.removeItem(key);\n        }\n\n        // delete from fallback\n        delete this.storageFallback[key];\n    }\n}\n","import Client from '@/Client';\n\n/**\n * BaseService class that should be inherited from all API services.\n */\nexport abstract class BaseService {\n    readonly client: Client\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n}\n","import { BaseService }   from '@/services/utils/BaseService';\nimport { CommonOptions } from '@/services/utils/options';\n\ninterface appleClientSecret {\n    secret: string;\n}\n\nexport class SettingsService extends BaseService {\n    /**\n     * Fetch all available app settings.\n     */\n    getAll(options?: CommonOptions): Promise<{[key: string]:any}> {\n        options = Object.assign({\n            'method': 'GET',\n        }, options);\n\n        return this.client.send('/api/settings', options);\n    }\n\n    /**\n     * Bulk updates app settings.\n     */\n    update(\n        bodyParams?: {[key:string]:any}|FormData,\n        options?: CommonOptions,\n    ): Promise<{[key: string]:any}> {\n        options = Object.assign({\n            'method': 'PATCH',\n            'body':   bodyParams,\n        }, options);\n\n        return this.client.send('/api/settings', options);\n    }\n\n    /**\n     * Performs a S3 filesystem connection test.\n     *\n     * The currently supported `filesystem` are \"storage\" and \"backups\".\n     */\n    testS3(filesystem: string = \"storage\", options?: CommonOptions): Promise<boolean> {\n        options = Object.assign({\n            'method': 'POST',\n            'body': {\n                'filesystem': filesystem,\n            },\n        }, options);\n\n        return this.client.send('/api/settings/test/s3', options)\n            .then(() => true);\n    }\n\n    /**\n     * Sends a test email.\n     *\n     * The possible `emailTemplate` values are:\n     * - verification\n     * - password-reset\n     * - email-change\n     */\n    testEmail(toEmail: string, emailTemplate: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign({\n            'method': 'POST',\n            'body': {\n                'email':    toEmail,\n                'template': emailTemplate,\n            },\n        }, options);\n\n        return this.client.send('/api/settings/test/email', options)\n            .then(() => true);\n    }\n\n    /**\n     * Generates a new Apple OAuth2 client secret.\n     */\n    generateAppleClientSecret(\n        clientId: string,\n        teamId: string,\n        keyId: string,\n        privateKey: string,\n        duration: number,\n        options?: CommonOptions,\n    ): Promise<appleClientSecret> {\n        options = Object.assign({\n            'method': 'POST',\n            'body': {\n                clientId,\n                teamId,\n                keyId,\n                privateKey,\n                duration,\n            },\n        }, options);\n\n        return this.client.send('/api/settings/apple/generate-client-secret', options);\n    }\n}\n","import { BaseService }         from '@/services/utils/BaseService';\nimport { ClientResponseError } from '@/ClientResponseError';\nimport { ResultList }          from '@/services/utils/dtos';\nimport {\n    CommonOptions,\n    ListOptions,\n    FullListOptions\n} from '@/services/utils/options';\n\nexport abstract class CrudService<M> extends BaseService   {\n    /**\n     * Base path for the crud actions (without trailing slash, eg. '/admins').\n     */\n    abstract get baseCrudPath(): string\n\n    /**\n     * Response data decoder.\n     */\n    decode<T = M>(data: { [key: string]: any }): T {\n        return data as T;\n    }\n\n    /**\n     * Returns a promise with all list items batch fetched at once\n     * (by default 500 items per request; to change it set the `batch` query param).\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    getFullList<T = M>(options?: FullListOptions): Promise<Array<T>>\n\n    /**\n     * Legacy version of getFullList with explicitly specified batch size.\n     */\n    getFullList<T = M>(batch?: number, options?: ListOptions): Promise<Array<T>>\n\n    getFullList<T = M>(batchOrqueryParams?: number|FullListOptions, options?: ListOptions): Promise<Array<T>> {\n        if (typeof batchOrqueryParams == \"number\") {\n            return this._getFullList<T>(batchOrqueryParams, options);\n        }\n\n        options = Object.assign({}, batchOrqueryParams, options);\n\n        let batch = 500;\n        if (options.batch) {\n            batch = options.batch;\n            delete options.batch;\n        }\n\n        return this._getFullList<T>(batch, options);\n    }\n\n    /**\n     * Returns paginated items list.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    getList<T = M>(page = 1, perPage = 30, options?: ListOptions): Promise<ResultList<T>> {\n        options = Object.assign({\n            method: 'GET'\n        }, options);\n\n        options.query = Object.assign({\n            'page':    page,\n            'perPage': perPage,\n        }, options.query);\n\n        return this.client.send(this.baseCrudPath, options)\n            .then((responseData: any) => {\n                const items: Array<T> = [];\n\n                if (responseData?.items) {\n                    responseData.items = responseData.items || [];\n                    for (const item of responseData.items) {\n                        items.push(this.decode<T>(item));\n                    }\n                    responseData.items = items;\n                }\n\n                return responseData;\n            });\n    }\n\n    /**\n     * Returns the first found item by the specified filter.\n     *\n     * Internally it calls `getList(1, 1, { filter, skipTotal })` and\n     * returns the first found item.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * For consistency with `getOne`, this method will throw a 404\n     * ClientResponseError if no item was found.\n     */\n    getFirstListItem<T = M>(filter: string, options?: CommonOptions): Promise<T> {\n        options = Object.assign({\n            'requestKey': 'one_by_filter_' + this.baseCrudPath + \"_\" + filter,\n        }, options);\n\n        options.query = Object.assign({\n            'filter':     filter,\n            'skipTotal':  1,\n        }, options.query);\n\n        return this.getList<T>(1, 1, options)\n            .then((result) => {\n                if (!result?.items?.length) {\n                    throw new ClientResponseError({\n                        status: 404,\n                        data: {\n                            code: 404,\n                            message: \"The requested resource wasn't found.\",\n                            data: {},\n                        },\n                    });\n                }\n\n                return result.items[0];\n            });\n    }\n\n    /**\n     * Returns single item by its id.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    getOne<T = M>(id: string, options?: CommonOptions): Promise<T> {\n        options = Object.assign({\n            'method': 'GET',\n        }, options);\n\n        return this.client.send(this.baseCrudPath + '/' + encodeURIComponent(id), options)\n            .then((responseData: any) => this.decode<T>(responseData));\n    }\n\n    /**\n     * Creates a new item.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    create<T = M>(\n        bodyParams?: {[key:string]:any}|FormData,\n        options?: CommonOptions,\n    ): Promise<T> {\n        options = Object.assign({\n            'method': 'POST',\n            'body':   bodyParams,\n        }, options);\n\n        return this.client.send(this.baseCrudPath, options)\n            .then((responseData: any) => this.decode<T>(responseData));\n    }\n\n    /**\n     * Updates an existing item by its id.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    update<T = M>(\n        id: string,\n        bodyParams?: {[key:string]:any}|FormData,\n        options?: CommonOptions,\n    ): Promise<T> {\n        options = Object.assign({\n            'method': 'PATCH',\n            'body':   bodyParams,\n        }, options);\n\n        return this.client.send(this.baseCrudPath + '/' + encodeURIComponent(id), options)\n            .then((responseData: any) => this.decode<T>(responseData));\n    }\n\n    /**\n     * Deletes an existing item by its id.\n     */\n    delete(id: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign({\n            'method': 'DELETE',\n        }, options);\n\n        return this.client.send(this.baseCrudPath + '/' + encodeURIComponent(id), options)\n            .then(() => true);\n    }\n\n    /**\n     * Returns a promise with all list items batch fetched at once.\n     */\n    protected _getFullList<T = M>(batchSize = 500, options?: ListOptions): Promise<Array<T>> {\n        options = options || {};\n        options.query = Object.assign({\n            'skipTotal': 1,\n        }, options.query);\n\n        let result: Array<T> = [];\n\n        let request = async (page: number): Promise<Array<any>> => {\n            return this.getList(page, batchSize || 500, options).then((list) => {\n                const castedList = (list as any as ResultList<T>);\n                const items      = castedList.items;\n\n                result = result.concat(items);\n\n                if (items.length == list.perPage) {\n                    return request(page + 1);\n                }\n\n                return result;\n            });\n        }\n\n        return request(1);\n    }\n}\n","import { SendOptions } from '@/services/utils/options';\n\nexport function normalizeLegacyOptionsArgs(legacyWarn: string, baseOptions: SendOptions, bodyOrOptions?: any, query?: any): SendOptions {\n    const hasBodyOrOptions = typeof bodyOrOptions !== 'undefined';\n    const hasQuery = typeof query !== 'undefined';\n\n    if (!hasQuery && !hasBodyOrOptions) {\n        return baseOptions;\n    }\n\n    if (hasQuery) {\n        console.warn(legacyWarn);\n        baseOptions.body = Object.assign({}, baseOptions.body, bodyOrOptions);\n        baseOptions.query = Object.assign({}, baseOptions.query, query);\n\n        return baseOptions;\n    }\n\n    baseOptions = Object.assign(baseOptions, bodyOrOptions);\n    return baseOptions;\n}\n","import { CrudService }                from '@/services/utils/CrudService';\nimport { AdminModel }                 from '@/services/utils/dtos';\nimport { CommonOptions }              from '@/services/utils/options';\nimport { normalizeLegacyOptionsArgs } from '@/services/utils/legacy';\n\nexport interface AdminAuthResponse {\n    [key: string]: any;\n\n    token: string;\n    admin: AdminModel;\n}\n\nexport class AdminService extends CrudService<AdminModel> {\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return '/api/admins';\n    }\n\n    // ---------------------------------------------------------------\n    // Post update/delete AuthStore sync\n    // ---------------------------------------------------------------\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the updated id, then\n     * on success the `client.authStore.model` will be updated with the result.\n     */\n    update<T = AdminModel>(\n        id: string,\n        bodyParams?: {[key:string]:any}|FormData,\n        options?: CommonOptions,\n    ): Promise<T> {\n        return super.update(id, bodyParams, options).then((item) => {\n            // update the store state if the updated item id matches with the stored model\n            if (\n                this.client.authStore.model?.id === item.id &&\n                typeof this.client.authStore.model?.collectionId === 'undefined' // is not record auth\n            ) {\n                this.client.authStore.save(this.client.authStore.token, item);\n            }\n\n            return item as any as T;\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the deleted id,\n     * then on success the `client.authStore` will be cleared.\n     */\n    delete(id: string, options?: CommonOptions): Promise<boolean> {\n        return super.delete(id, options).then((success) => {\n            // clear the store state if the deleted item id matches with the stored model\n            if (\n                success &&\n                this.client.authStore.model?.id === id &&\n                typeof this.client.authStore.model?.collectionId === 'undefined' // is not record auth\n            ) {\n                this.client.authStore.clear();\n            }\n\n            return success;\n        });\n    }\n\n    // ---------------------------------------------------------------\n    // Auth handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Prepare successful authorize response.\n     */\n    protected authResponse(responseData: any): AdminAuthResponse {\n        const admin = this.decode(responseData?.admin || {});\n\n        if (responseData?.token && responseData?.admin) {\n            this.client.authStore.save(responseData.token, admin);\n        }\n\n        return Object.assign({}, responseData, {\n            // normalize common fields\n            'token': responseData?.token || '',\n            'admin': admin,\n        });\n    }\n\n    /**\n     * Authenticate an admin account with its email and password\n     * and returns a new admin token and data.\n     *\n     * On success this method automatically updates the client's AuthStore data.\n     */\n    authWithPassword(email: string, password: string, options?: CommonOptions): Promise<AdminAuthResponse>\n\n    /**\n     * @deprecated\n     * Consider using authWithPassword(email, password, options?).\n     */\n    authWithPassword(email: string, password: string, body?: any, query?: any): Promise<AdminAuthResponse>\n\n    authWithPassword(\n        email: string,\n        password: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<AdminAuthResponse> {\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'identity': email,\n                'password': password,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of authWithPassword(email, pass, body?, query?) is depreacted. Consider replacing it with authWithPassword(email, pass, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCrudPath + '/auth-with-password', options)\n            .then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Refreshes the current admin authenticated instance and\n     * returns a new token and admin data.\n     *\n     * On success this method automatically updates the client's AuthStore data.\n     */\n    authRefresh(options?: CommonOptions): Promise<AdminAuthResponse>\n\n    /**\n     * @deprecated\n     * Consider using authRefresh(options?).\n     */\n    authRefresh(body?: any, query?: any): Promise<AdminAuthResponse>\n\n    authRefresh(bodyOrOptions?: any, query?: any): Promise<AdminAuthResponse> {\n        let options: any = {\n            'method': 'POST',\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of authRefresh(body?, query?) is depreacted. Consider replacing it with authRefresh(options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCrudPath + '/auth-refresh', options)\n            .then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Sends admin password reset request.\n     */\n    requestPasswordReset(email: string, options?: CommonOptions): Promise<boolean>\n\n    /**\n     * @deprecated\n     * Consider using requestPasswordReset(email, options?).\n     */\n    requestPasswordReset(email: string, body?: any, query?: any): Promise<boolean>\n\n    requestPasswordReset(email: string, bodyOrOptions?: any, query?: any): Promise<boolean> {\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'email': email,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of requestPasswordReset(email, body?, query?) is depreacted. Consider replacing it with requestPasswordReset(email, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCrudPath + '/request-password-reset', options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms admin password reset request.\n     */\n    confirmPasswordReset(resetToken: string, password: string, passwordConfirm: string, options?: CommonOptions): Promise<boolean>\n\n    /**\n     * @deprecated\n     * Consider using confirmPasswordReset(resetToken, password, passwordConfirm, options?).\n     */\n    confirmPasswordReset(resetToken: string, password: string, passwordConfirm: string, body?: any, query?: any): Promise<boolean>\n\n    confirmPasswordReset(resetToken: string, password: string, passwordConfirm: string, bodyOrOptions?: any, query?: any): Promise<boolean>{\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'token':           resetToken,\n                'password':        password,\n                'passwordConfirm': passwordConfirm,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of confirmPasswordReset(resetToken, password, passwordConfirm, body?, query?) is depreacted. Consider replacing it with confirmPasswordReset(resetToken, password, passwordConfirm, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCrudPath + '/confirm-password-reset', options)\n            .then(() => true);\n    }\n}\n","import Client from '@/Client';\nimport { CrudService } from '@/services/utils/CrudService';\nimport { UnsubscribeFunc } from '@/services/RealtimeService';\nimport { ClientResponseError } from '@/ClientResponseError';\nimport { ResultList, RecordModel, ExternalAuthModel } from '@/services/utils/dtos';\nimport {\n    SendOptions,\n    CommonOptions,\n    RecordOptions,\n    RecordListOptions,\n    RecordFullListOptions,\n} from '@/services/utils/options';\nimport { normalizeLegacyOptionsArgs } from '@/services/utils/legacy';\n\nexport interface RecordAuthResponse<T = RecordModel> {\n    // The signed PocketBase auth record.\n    record: T;\n\n    // The PocketBase record auth token.\n    //\n    // If you are looking for the OAuth2 access and refresh tokens\n    // they are available under the `meta.accessToken` and `meta.refreshToken` props.\n    token: string;\n\n    // Auth meta data usually filled when OAuth2 is used.\n    meta?: {[key: string]: any};\n}\n\nexport interface AuthProviderInfo {\n    name:                string;\n    state:               string;\n    codeVerifier:        string;\n    codeChallenge:       string;\n    codeChallengeMethod: string;\n    authUrl:             string;\n}\n\nexport interface AuthMethodsList {\n    usernamePassword: boolean;\n    emailPassword:    boolean;\n    authProviders:    Array<AuthProviderInfo>;\n}\n\nexport interface RecordSubscription<T = RecordModel> {\n    action: string; // eg. create, update, delete\n    record: T;\n}\n\nexport type OAuth2UrlCallback = (url: string) => void|Promise<void>;\n\nexport interface OAuth2AuthConfig extends SendOptions {\n    // the name of the OAuth2 provider (eg. \"google\")\n    provider: string;\n\n    // custom scopes to overwrite the default ones\n    scopes?: Array<string>;\n\n    // optional record create data\n    createData?: {[key: string]: any};\n\n    // optional callback that is triggered after the OAuth2 sign-in/sign-up url generation\n    urlCallback?: OAuth2UrlCallback;\n\n    // optional query params to send with the PocketBase auth request (eg. fields, expand, etc.)\n    query?: RecordOptions;\n}\n\nexport class RecordService extends CrudService<RecordModel> {\n    readonly collectionIdOrName: string;\n\n    constructor(client: Client, collectionIdOrName: string) {\n        super(client);\n\n        this.collectionIdOrName = collectionIdOrName;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return this.baseCollectionPath + '/records';\n    }\n\n    /**\n     * Returns the current collection service base path.\n     */\n    get baseCollectionPath(): string {\n        return '/api/collections/' + encodeURIComponent(this.collectionIdOrName);\n    }\n\n    // ---------------------------------------------------------------\n    // Realtime handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * @deprecated Use subscribe(recordId, callback) instead.\n     *\n     * Subscribe to the realtime changes of a single record in the collection.\n     */\n    async subscribeOne<T = RecordModel>(recordId: string, callback: (data: RecordSubscription<T>) => void): Promise<UnsubscribeFunc> {\n        console.warn(\"PocketBase: subscribeOne(recordId, callback) is deprecated. Please replace it with subscribe(recordId, callback).\");\n        return this.client.realtime.subscribe(this.collectionIdOrName + \"/\" + recordId, callback);\n    }\n\n    /**\n     * @deprecated This form of subscribe is deprecated. Please use `subscribe(\"*\", callback)`.\n     */\n    async subscribe<T = RecordModel>(callback: (data: RecordSubscription<T>) => void): Promise<UnsubscribeFunc>\n\n    /**\n     * Subscribe to realtime changes to the specified topic (\"*\" or record id).\n     *\n     * If `topic` is the wildcard \"*\", then this method will subscribe to\n     * any record changes in the collection.\n     *\n     * If `topic` is a record id, then this method will subscribe only\n     * to changes of the specified record id.\n     *\n     * It's OK to subscribe multiple times to the same topic.\n     * You can use the returned `UnsubscribeFunc` to remove only a single subscription.\n     * Or use `unsubscribe(topic)` if you want to remove all subscriptions attached to the topic.\n     */\n    async subscribe<T = RecordModel>(topic: string, callback: (data: RecordSubscription<T>) => void): Promise<UnsubscribeFunc>\n\n    async subscribe<T = RecordModel>(\n        topicOrCallback: string|((data: RecordSubscription<T>) => void),\n        callback?: (data: RecordSubscription<T>) => void\n    ): Promise<UnsubscribeFunc> {\n        if (typeof topicOrCallback === 'function') {\n            console.warn(\"PocketBase: subscribe(callback) is deprecated. Please replace it with subscribe('*', callback).\");\n            return this.client.realtime.subscribe(this.collectionIdOrName, topicOrCallback);\n        }\n\n        if (!callback) {\n            throw new Error(\"Missing subscription callback.\");\n        }\n\n        if (topicOrCallback === \"\") {\n            throw new Error(\"Missing topic.\");\n        }\n\n        let topic = this.collectionIdOrName;\n        if (topicOrCallback !== \"*\") {\n            topic += ('/' + topicOrCallback);\n        }\n\n        return this.client.realtime.subscribe(topic, callback)\n    }\n\n    /**\n     * Unsubscribe from all subscriptions of the specified topic\n     * (\"*\" or record id).\n     *\n     * If `topic` is not set, then this method will unsubscribe from\n     * all subscriptions associated to the current collection.\n     */\n    async unsubscribe(topic?: string): Promise<void> {\n        // unsubscribe wildcard topic\n        if (topic === \"*\") {\n            return this.client.realtime.unsubscribe(this.collectionIdOrName);\n        }\n\n        // unsubscribe recordId topic\n        if (topic) {\n            return this.client.realtime.unsubscribe(this.collectionIdOrName + \"/\" + topic);\n        }\n\n        // unsubscribe from everything related to the collection\n        return this.client.realtime.unsubscribeByPrefix(this.collectionIdOrName);\n    }\n\n    // ---------------------------------------------------------------\n    // Crud handers\n    // ---------------------------------------------------------------\n    /**\n     * @inheritdoc\n     */\n    getFullList<T = RecordModel>(options?: RecordFullListOptions): Promise<Array<T>>\n\n    /**\n     * @inheritdoc\n     */\n    getFullList<T = RecordModel>(batch?: number, options?: RecordListOptions): Promise<Array<T>>\n\n    /**\n     * @inheritdoc\n     */\n    getFullList<T = RecordModel>(batchOrOptions?: number|RecordFullListOptions, options?: RecordListOptions): Promise<Array<T>> {\n        if (typeof batchOrOptions == \"number\") {\n            return super.getFullList<T>(batchOrOptions, options);\n        }\n\n        const params = Object.assign({}, batchOrOptions, options);\n\n        return super.getFullList<T>(params);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getList<T = RecordModel>(page = 1, perPage = 30, options?: RecordListOptions): Promise<ResultList<T>> {\n        return super.getList<T>(page, perPage, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getFirstListItem<T = RecordModel>(filter: string, options?: RecordListOptions): Promise<T> {\n        return super.getFirstListItem<T>(filter, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getOne<T = RecordModel>(id: string, options?: RecordOptions): Promise<T> {\n        return super.getOne<T>(id, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    create<T = RecordModel>(bodyParams?: {[key:string]:any}|FormData, options?: RecordOptions): Promise<T> {\n        return super.create<T>(bodyParams, options);\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the updated id, then\n     * on success the `client.authStore.model` will be updated with the result.\n     */\n    update<T = RecordModel>(id: string, bodyParams?: {[key:string]:any}|FormData, options?: RecordOptions): Promise<T> {\n        return super.update<RecordModel>(id, bodyParams, options).then((item) => {\n            if (\n                // is record auth\n                this.client.authStore.model?.id === item?.id &&\n                (\n                    this.client.authStore.model?.collectionId === this.collectionIdOrName ||\n                    this.client.authStore.model?.collectionName === this.collectionIdOrName\n                )\n            ) {\n                this.client.authStore.save(this.client.authStore.token, item);\n            }\n\n            return item as any as T;\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the deleted id,\n     * then on success the `client.authStore` will be cleared.\n     */\n    delete(id: string, options?: CommonOptions): Promise<boolean> {\n        return super.delete(id, options).then((success) => {\n            if (\n                success &&\n                // is record auth\n                this.client.authStore.model?.id === id &&\n                (\n                    this.client.authStore.model?.collectionId === this.collectionIdOrName ||\n                    this.client.authStore.model?.collectionName === this.collectionIdOrName\n                )\n            ) {\n                this.client.authStore.clear();\n            }\n\n            return success;\n        });\n    }\n\n    // ---------------------------------------------------------------\n    // Auth handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Prepare successful collection authorization response.\n     */\n    protected authResponse<T = RecordModel>(responseData: any): RecordAuthResponse<T> {\n        const record = this.decode(responseData?.record || {});\n\n        this.client.authStore.save(responseData?.token, record);\n\n        return Object.assign({}, responseData, {\n            // normalize common fields\n            'token':  responseData?.token || '',\n            'record': record as any as T,\n        });\n    }\n\n    /**\n     * Returns all available collection auth methods.\n     */\n    listAuthMethods(options?: CommonOptions): Promise<AuthMethodsList> {\n        options = Object.assign({\n            'method': 'GET',\n        }, options);\n\n        return this.client.send(this.baseCollectionPath + '/auth-methods', options)\n            .then((responseData: any) => {\n                return Object.assign({}, responseData, {\n                    // normalize common fields\n                    'usernamePassword': !!responseData?.usernamePassword,\n                    'emailPassword':    !!responseData?.emailPassword,\n                    'authProviders':    Array.isArray(responseData?.authProviders) ? responseData?.authProviders : [],\n                });\n            });\n    }\n\n    /**\n     * Authenticate a single auth collection record via its username/email and password.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     */\n    authWithPassword<T = RecordModel>(usernameOrEmail: string, password: string, options?: RecordOptions): Promise<RecordAuthResponse<T>>\n\n    /**\n     * @deprecated\n     * Consider using authWithPassword(usernameOrEmail, password, options?).\n     */\n    authWithPassword<T = RecordModel>(usernameOrEmail: string, password: string, body?: any, query?: any): Promise<RecordAuthResponse<T>>\n\n    authWithPassword<T = RecordModel>(usernameOrEmail: string, password: string, bodyOrOptions?: any, query?: any): Promise<RecordAuthResponse<T>> {\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'identity': usernameOrEmail,\n                'password': password,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of authWithPassword(usernameOrEmail, pass, body?, query?) is depreacted. Consider replacing it with authWithPassword(usernameOrEmail, pass, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCollectionPath + '/auth-with-password', options)\n            .then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Authenticate a single auth collection record with OAuth2 code.\n     *\n     * If you don't have an OAuth2 code you may also want to check `authWithOAuth2` method.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     * - the OAuth2 account data (eg. name, email, avatar, etc.)\n     */\n    authWithOAuth2Code<T = RecordModel>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData?: {[key:string]:any},\n        options?: RecordOptions,\n    ): Promise<RecordAuthResponse<T>>\n\n    /**\n     * @deprecated\n     * Consider using authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createdData, options?).\n     */\n    authWithOAuth2Code<T = RecordModel>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData?: {[key:string]:any},\n        body?: any,\n        query?: any\n    ): Promise<RecordAuthResponse<T>>\n\n    authWithOAuth2Code<T = RecordModel>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData?: {[key:string]:any},\n        bodyOrOptions?: any,\n        query?: any\n    ): Promise<RecordAuthResponse<T>> {\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'provider':     provider,\n                'code':         code,\n                'codeVerifier': codeVerifier,\n                'redirectUrl':  redirectUrl,\n                'createData':   createData,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createData?, body?, query?) is depreacted. Consider replacing it with authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createData?, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCollectionPath + '/auth-with-oauth2', options)\n            .then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * @deprecated This form of authWithOAuth2 is deprecated.\n     *\n     * Please use `authWithOAuth2Code()` OR its simplified realtime version\n     * as shown in https://pocketbase.io/docs/authentication/#oauth2-integration.\n     */\n    async authWithOAuth2<T = RecordModel>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData?: {[key: string]: any},\n        bodyParams?: {[key: string]: any},\n        queryParams?: RecordOptions,\n    ): Promise<RecordAuthResponse<T>>\n\n    /**\n     * Authenticate a single auth collection record with OAuth2\n     * **without custom redirects, deeplinks or even page reload**.\n     *\n     * This method initializes a one-off realtime subscription and will\n     * open a popup window with the OAuth2 vendor page to authenticate.\n     * Once the external OAuth2 sign-in/sign-up flow is completed, the popup\n     * window will be automatically closed and the OAuth2 data sent back\n     * to the user through the previously established realtime connection.\n     *\n     * You can specify an optional `urlCallback` prop to customize\n     * the default url `window.open` behavior.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     * - the OAuth2 account data (eg. name, email, avatar, etc.)\n     *\n     * Example:\n     *\n     * ```js\n     * const authData = await pb.collection(\"users\").authWithOAuth2({\n     *     provider: \"google\",\n     * })\n     * ```\n     *\n     * _Site-note_: when creating the OAuth2 app in the provider dashboard\n     * you have to configure `https://yourdomain.com/api/oauth2-redirect`\n     * as redirect URL.\n     */\n    async authWithOAuth2<T = RecordModel>(options: OAuth2AuthConfig): Promise<RecordAuthResponse<T>>\n\n    async authWithOAuth2<T = RecordModel>(...args: any): Promise<RecordAuthResponse<T>> {\n        // fallback to legacy format\n        if (args.length > 1 || typeof args?.[0] === 'string') {\n            console.warn(\"PocketBase: This form of authWithOAuth2() is deprecated and may get removed in the future. Please replace with authWithOAuth2Code() OR use the authWithOAuth2() realtime form as shown in https://pocketbase.io/docs/authentication/#oauth2-integration.\");\n            return this.authWithOAuth2Code<T>(\n                args?.[0] || '',\n                args?.[1] || '',\n                args?.[2] || '',\n                args?.[3] || '',\n                args?.[4] || {},\n                args?.[5] || {},\n                args?.[6] || {},\n            );\n        }\n\n        const config = args?.[0] || {};\n\n        const authMethods = await this.listAuthMethods();\n\n        const provider = authMethods.authProviders.find((p) => p.name === config.provider);\n        if (!provider) {\n            throw new ClientResponseError(new Error(`Missing or invalid provider \"${config.provider}\".`));\n        }\n\n        const redirectUrl = this.client.buildUrl('/api/oauth2-redirect');\n\n        return new Promise(async (resolve, reject) => {\n            try {\n                // initialize a one-off @oauth2 realtime subscription\n                const unsubscribe = await this.client.realtime.subscribe('@oauth2', async (e) => {\n                    const oldState = this.client.realtime.clientId;\n\n                    try {\n                        unsubscribe();\n\n                        if (!e.state || oldState !== e.state) {\n                            throw new Error(\"State parameters don't match.\");\n                        }\n\n                        // clear the non SendOptions props\n                        const options = Object.assign({}, config);\n                        delete options.provider;\n                        delete options.scopes;\n                        delete options.createData;\n                        delete options.urlCallback;\n\n                        const authData = await this.authWithOAuth2Code<T>(\n                            provider.name,\n                            e.code,\n                            provider.codeVerifier,\n                            redirectUrl,\n                            config.createData,\n                            options,\n                        );\n\n                        resolve(authData);\n                    } catch (err) {\n                        reject(new ClientResponseError(err));\n                    }\n                });\n\n                const replacements: {[key: string]: any} = {\n                    \"state\": this.client.realtime.clientId,\n                }\n                if (config.scopes?.length) {\n                    replacements[\"scope\"] = config.scopes.join(\" \");\n                }\n\n                const url = this._replaceQueryParams(provider.authUrl + redirectUrl, replacements);\n\n                await (config.urlCallback ? config.urlCallback(url) : this._defaultUrlCallback(url));\n            } catch (err) {\n                reject(new ClientResponseError(err));\n            }\n        });\n    }\n\n    /**\n     * Refreshes the current authenticated record instance and\n     * returns a new token and record data.\n     *\n     * On success this method also automatically updates the client's AuthStore.\n     */\n    authRefresh<T = RecordModel>(options?: RecordOptions): Promise<RecordAuthResponse<T>>\n\n    /**\n     * @deprecated\n     * Consider using authRefresh(options?).\n     */\n    authRefresh<T = RecordModel>(body?: any, query?: any): Promise<RecordAuthResponse<T>>\n\n    authRefresh<T = RecordModel>(bodyOrOptions?: any, query?: any): Promise<RecordAuthResponse<T>> {\n        let options: any = {\n            'method': 'POST',\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of authRefresh(body?, query?) is depreacted. Consider replacing it with authRefresh(options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCollectionPath + '/auth-refresh', options)\n            .then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Sends auth record password reset request.\n     */\n    requestPasswordReset(email: string, options?: CommonOptions): Promise<boolean>\n\n    /**\n     * @deprecated\n     * Consider using requestPasswordReset(email, options?).\n     */\n    requestPasswordReset(email: string, body?: any, query?: any): Promise<boolean>\n\n    requestPasswordReset(email: string, bodyOrOptions?: any, query?: any): Promise<boolean> {\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'email': email,\n            }\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of requestPasswordReset(email, body?, query?) is depreacted. Consider replacing it with requestPasswordReset(email, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCollectionPath + '/request-password-reset', options).then(() => true);\n    }\n\n    /**\n     * Confirms auth record password reset request.\n     */\n    confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        options?: CommonOptions,\n    ): Promise<boolean>\n\n    /**\n     * @deprecated\n     * Consider using confirmPasswordReset(passwordResetToken, password, passwordConfirm, options?).\n     */\n    confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        body?: any,\n        query?: any,\n    ): Promise<boolean>\n\n    confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'token':           passwordResetToken,\n                'password':        password,\n                'passwordConfirm': passwordConfirm,\n            }\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of confirmPasswordReset(token, password, passwordConfirm, body?, query?) is depreacted. Consider replacing it with confirmPasswordReset(token, password, passwordConfirm, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCollectionPath + '/confirm-password-reset', options)\n            .then(() => true);\n    }\n\n    /**\n     * Sends auth record verification email request.\n     */\n    requestVerification(email: string, options?: CommonOptions): Promise<boolean>\n\n    /**\n     * @deprecated\n     * Consider using requestVerification(email, options?).\n     */\n    requestVerification(email: string, body?: any, query?: any): Promise<boolean>\n\n    requestVerification(email: string, bodyOrOptions?: any, query?: any): Promise<boolean> {\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'email': email,\n            }\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of requestVerification(email, body?, query?) is depreacted. Consider replacing it with requestVerification(email, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCollectionPath + '/request-verification', options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms auth record email verification request.\n     */\n    confirmVerification(verificationToken: string, options?: CommonOptions): Promise<boolean>\n\n    /**\n     * @deprecated\n     * Consider using confirmVerification(verificationToken, options?).\n     */\n    confirmVerification(verificationToken: string, body?: any, query?: any): Promise<boolean>\n\n    confirmVerification(verificationToken: string, bodyOrOptions?: any, query?: any): Promise<boolean> {\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'token': verificationToken,\n            }\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of confirmVerification(token, body?, query?) is depreacted. Consider replacing it with confirmVerification(token, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCollectionPath + '/confirm-verification', options)\n            .then(() => true);\n    }\n\n    /**\n     * Sends an email change request to the authenticated record model.\n     */\n    requestEmailChange(newEmail: string, options?: CommonOptions): Promise<boolean>\n\n    /**\n     * @deprecated\n     * Consider using requestEmailChange(newEmail, options?).\n     */\n    requestEmailChange(newEmail: string, body?: any, query?: any): Promise<boolean>\n\n    requestEmailChange(newEmail: string, bodyOrOptions?: any, query?: any): Promise<boolean> {\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'newEmail': newEmail,\n            }\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of requestEmailChange(newEmail, body?, query?) is depreacted. Consider replacing it with requestEmailChange(newEmail, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCollectionPath + '/request-email-change', options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms auth record's new email address.\n     */\n    confirmEmailChange(emailChangeToken: string, password: string, options?: CommonOptions): Promise<boolean>\n\n\n    /**\n     * @deprecated\n     * Consider using confirmEmailChange(emailChangeToken, password, options?).\n     */\n    confirmEmailChange(emailChangeToken: string, password: string, body?: any, query?: any): Promise<boolean>\n\n    confirmEmailChange(emailChangeToken: string, password: string, bodyOrOptions?: any, query?: any): Promise<boolean> {\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'token':    emailChangeToken,\n                'password': password,\n            }\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of confirmEmailChange(token, password, body?, query?) is depreacted. Consider replacing it with confirmEmailChange(token, password, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCollectionPath + '/confirm-email-change', options)\n            .then(() => true);\n    }\n\n    /**\n     * Lists all linked external auth providers for the specified auth record.\n     */\n    listExternalAuths(recordId: string, options?: CommonOptions): Promise<Array<ExternalAuthModel>> {\n        options = Object.assign({\n            'method': 'GET',\n        }, options);\n\n        return this.client.send(this.baseCrudPath + '/' + encodeURIComponent(recordId) + '/external-auths', options);\n    }\n\n    /**\n     * Unlink a single external auth provider from the specified auth record.\n     */\n    unlinkExternalAuth(recordId: string, provider: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign({\n            'method': 'DELETE',\n        }, options);\n\n        return this.client.send(this.baseCrudPath + '/' + encodeURIComponent(recordId) + '/external-auths/' + encodeURIComponent(provider), options)\n            .then(() => true);\n    }\n\n    // ---------------------------------------------------------------\n\n    // very rudimentary url query params replacement because at the moment\n    // URL (and URLSearchParams) doesn't seem to be fully supported in React Native\n    //\n    // note: for details behind some of the decode/encode parsing check https://unixpapa.com/js/querystring.html\n    private _replaceQueryParams(url: string, replacements: {[key: string]: any} = {}): string {\n        let urlPath = url\n        let query = \"\";\n\n        const queryIndex = url.indexOf(\"?\");\n        if (queryIndex >= 0) {\n            urlPath = url.substring(0, url.indexOf(\"?\"));\n            query = url.substring(url.indexOf(\"?\") + 1);\n        }\n\n        const parsedParams: {[key: string]: string} = {};\n\n        // parse the query parameters\n        const rawParams = query.split(\"&\");\n        for (const param of rawParams) {\n            if (param == \"\") {\n                continue\n            }\n\n            const pair = param.split(\"=\");\n            parsedParams[decodeURIComponent(pair[0].replace(/\\+/g,' '))] = decodeURIComponent((pair[1] || \"\").replace(/\\+/g,' '));\n        }\n\n        // apply the replacements\n        for (let key in replacements) {\n            if (!replacements.hasOwnProperty(key)) {\n                continue;\n            }\n\n            if (replacements[key] == null) {\n                delete parsedParams[key];\n            } else {\n                parsedParams[key] = replacements[key];\n            }\n        }\n\n        // construct back the full query string\n        query = \"\";\n        for (let key in parsedParams) {\n            if (!parsedParams.hasOwnProperty(key)) {\n                continue;\n            }\n\n            if (query != \"\") {\n                query += \"&\";\n            }\n\n            query += encodeURIComponent(key.replace(/%20/g,'+')) + \"=\" + encodeURIComponent(parsedParams[key].replace(/%20/g,'+'));\n        }\n\n        return query != \"\" ? (urlPath + \"?\" + query) : urlPath;\n    }\n\n    private _defaultUrlCallback(url: string) {\n        if (typeof window === \"undefined\" || !window?.open) {\n            throw new ClientResponseError(new Error(`Not in a browser context - please pass a custom urlCallback function.`));\n        }\n\n        let width  = 1024;\n        let height = 768;\n\n        let windowWidth  = window.innerWidth;\n        let windowHeight = window.innerHeight;\n\n        // normalize window size\n        width  = width > windowWidth ? windowWidth : width;\n        height = height > windowHeight ? windowHeight : height;\n\n        let left = (windowWidth / 2) - (width / 2);\n        let top  = (windowHeight / 2) - (height / 2);\n\n        window.open(\n            url,\n            \"oauth2-popup\",\n            'width='+width+',height='+height+',top='+top+',left='+left+',resizable,menubar=no'\n        );\n    }\n}\n","import { CrudService }     from '@/services/utils/CrudService';\nimport { CollectionModel } from '@/services/utils/dtos';\nimport { CommonOptions }   from '@/services/utils/options';\n\nexport class CollectionService extends CrudService<CollectionModel> {\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return '/api/collections';\n    }\n\n    /**\n     * Imports the provided collections.\n     *\n     * If `deleteMissing` is `true`, all local collections and schema fields,\n     * that are not present in the imported configuration, WILL BE DELETED\n     * (including their related records data)!\n     */\n    async import(\n        collections: Array<CollectionModel>,\n        deleteMissing: boolean = false,\n        options?: CommonOptions,\n    ): Promise<true> {\n        options = Object.assign({\n            'method': 'PUT',\n            'body': {\n                'collections':   collections,\n                'deleteMissing': deleteMissing,\n            }\n        }, options);\n\n        return this.client.send(this.baseCrudPath + '/import', options)\n            .then(() => true);\n    }\n}\n","import { BaseService } from '@/services/utils/BaseService';\nimport { ResultList, LogRequestModel }  from '@/services/utils/dtos';\nimport {\n    CommonOptions,\n    ListOptions,\n    LogStatsOptions,\n} from '@/services/utils/options';\n\nexport interface HourlyStats {\n    total: number;\n    date:  string;\n}\n\nexport class LogService extends BaseService {\n    /**\n     * Returns paginated logged requests list.\n     */\n    getRequestsList(page = 1, perPage = 30, options?: ListOptions): Promise<ResultList<LogRequestModel>> {\n        options = Object.assign({'method': 'GET'}, options);\n\n        options.query = Object.assign({\n            'page':    page,\n            'perPage': perPage,\n        }, options.query);\n\n        return this.client.send('/api/logs/requests', options);\n    }\n\n    /**\n     * Returns a single logged request by its id.\n     */\n    getRequest(id: string, options?: CommonOptions): Promise<LogRequestModel> {\n        options = Object.assign({\n            'method': 'GET',\n        }, options);\n\n        return this.client.send('/api/logs/requests/' + encodeURIComponent(id), options);\n    }\n\n    /**\n     * Returns request logs statistics.\n     */\n    getRequestsStats(options?: LogStatsOptions): Promise<Array<HourlyStats>> {\n        options = Object.assign({\n            'method': 'GET',\n        }, options);\n\n        return this.client.send('/api/logs/requests/stats', options);\n    }\n}\n","import { BaseService }         from '@/services/utils/BaseService';\nimport { ClientResponseError } from '@/ClientResponseError';\n\ninterface promiseCallbacks {\n    resolve: Function\n    reject: Function\n}\n\nexport type UnsubscribeFunc = () => Promise<void>;\n\nexport class RealtimeService extends BaseService {\n    clientId: string = \"\";\n\n    private eventSource: EventSource | null = null;\n    private subscriptions: { [key: string]: Array<EventListener> } = {};\n    private lastSentTopics: Array<string> = [];\n    private connectTimeoutId: any;\n    private maxConnectTimeout: number = 15000;\n    private reconnectTimeoutId: any;\n    private reconnectAttempts: number = 0;\n    private maxReconnectAttempts: number = Infinity;\n    private predefinedReconnectIntervals: Array<number> = [\n        200, 300, 500, 1000, 1200, 1500, 2000,\n    ];\n    private pendingConnects: Array<promiseCallbacks> = [];\n\n    /**\n     * Returns whether the realtime connection has been established.\n     */\n    get isConnected(): boolean {\n        return !!this.eventSource && !!this.clientId && !this.pendingConnects.length;\n    }\n\n    /**\n     * Register the subscription listener.\n     *\n     * You can subscribe multiple times to the same topic.\n     *\n     * If the SSE connection is not started yet,\n     * this method will also initialize it.\n     */\n    async subscribe(topic: string, callback: (data: any) => void): Promise<UnsubscribeFunc> {\n        if (!topic) {\n            throw new Error('topic must be set.')\n        }\n\n        const listener = function (e: Event) {\n            const msgEvent = (e as MessageEvent);\n\n            let data;\n            try {\n                data = JSON.parse(msgEvent?.data);\n            } catch {}\n\n            callback(data || {});\n        };\n\n        // store the listener\n        if (!this.subscriptions[topic]) {\n            this.subscriptions[topic] = [];\n        }\n        this.subscriptions[topic].push(listener);\n\n        if (!this.isConnected) {\n            // initialize sse connection\n            await this.connect();\n        } else if (this.subscriptions[topic].length === 1) {\n            // send the updated subscriptions (if it is the first for the topic)\n            await this.submitSubscriptions();\n        } else {\n            // only register the listener\n            this.eventSource?.addEventListener(topic, listener);\n        }\n\n        return async (): Promise<void> => {\n            return this.unsubscribeByTopicAndListener(topic, listener);\n        };\n    }\n\n    /**\n     * Unsubscribe from all subscription listeners with the specified topic.\n     *\n     * If `topic` is not provided, then this method will unsubscribe\n     * from all active subscriptions.\n     *\n     * This method is no-op if there are no active subscriptions.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribe(topic?: string): Promise<void> {\n        if (!this.hasSubscriptionListeners(topic)) {\n            return; // already unsubscribed\n        }\n\n        if (!topic) {\n            // remove all subscriptions\n            this.subscriptions = {};\n        } else {\n            // remove all topic listeners\n            for (let listener of this.subscriptions[topic]) {\n                this.eventSource?.removeEventListener(topic, listener);\n            }\n            delete this.subscriptions[topic];\n        }\n\n        if (!this.hasSubscriptionListeners()) {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        } else if (!this.hasSubscriptionListeners(topic)) {\n            // submit subscriptions change if there are no other active subscriptions related to the topic\n            await this.submitSubscriptions();\n        }\n    }\n\n    /**\n     * Unsubscribe from all subscription listeners starting with the specified topic prefix.\n     *\n     * This method is no-op if there are no active subscriptions with the specified topic prefix.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribeByPrefix(topicPrefix: string): Promise<void> {\n        let hasAtleastOneTopic = false;\n        for (let topic in this.subscriptions) {\n            if (!topic.startsWith(topicPrefix)) {\n                continue;\n            }\n\n            hasAtleastOneTopic = true;\n            for (let listener of this.subscriptions[topic]) {\n                this.eventSource?.removeEventListener(topic, listener);\n            }\n            delete this.subscriptions[topic];\n        }\n\n        if (!hasAtleastOneTopic) {\n            return; // nothing to unsubscribe from\n        }\n\n        if (this.hasSubscriptionListeners()) {\n            // submit the deleted subscriptions\n            await this.submitSubscriptions();\n        } else {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        }\n    }\n\n    /**\n     * Unsubscribe from all subscriptions matching the specified topic and listener function.\n     *\n     * This method is no-op if there are no active subscription with\n     * the specified topic and listener.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribeByTopicAndListener(topic: string, listener: EventListener): Promise<void> {\n        if (!Array.isArray(this.subscriptions[topic]) || !this.subscriptions[topic].length) {\n            return; // already unsubscribed\n        }\n\n        let exist = false;\n        for (let i = this.subscriptions[topic].length - 1; i >= 0; i--) {\n            if (this.subscriptions[topic][i] !== listener) {\n                continue;\n            }\n\n            exist = true;                           // has at least one matching listener\n            delete this.subscriptions[topic][i];    // removes the function reference\n            this.subscriptions[topic].splice(i, 1); // reindex the array\n            this.eventSource?.removeEventListener(topic, listener);\n        }\n        if (!exist) {\n            return;\n        }\n\n        // remove the topic from the subscriptions list if there are no other listeners\n        if (!this.subscriptions[topic].length) {\n            delete this.subscriptions[topic];\n        }\n\n        if (!this.hasSubscriptionListeners()) {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        } else if (!this.hasSubscriptionListeners(topic)) {\n            // submit subscriptions change if there are no other active subscriptions related to the topic\n            await this.submitSubscriptions();\n        }\n    }\n\n    private hasSubscriptionListeners(topicToCheck?: string): boolean {\n        this.subscriptions = this.subscriptions || {};\n\n        // check the specified topic\n        if (topicToCheck) {\n            return !!this.subscriptions[topicToCheck]?.length;\n        }\n\n        // check for at least one non-empty topic\n        for (let topic in this.subscriptions) {\n            if (!!this.subscriptions[topic]?.length) {\n                return true\n            }\n        }\n\n        return false;\n    }\n\n    private async submitSubscriptions(): Promise<void> {\n        if (!this.clientId) {\n            return; // no client/subscriber\n        }\n\n        // optimistic update\n        this.addAllSubscriptionListeners();\n\n        this.lastSentTopics = this.getNonEmptySubscriptionTopics();\n\n        return this.client.send('/api/realtime', {\n            'method': 'POST',\n            'body': {\n                'clientId': this.clientId,\n                'subscriptions': this.lastSentTopics,\n            },\n            'query': {\n                'requestKey': this.getSubscriptionsCancelKey(),\n            },\n        }).catch((err) => {\n            if (err?.isAbort) {\n                return; // silently ignore aborted pending requests\n            }\n            throw err;\n        });\n    }\n\n    private getSubscriptionsCancelKey(): string {\n        return \"realtime_\" + this.clientId;\n    }\n\n    private getNonEmptySubscriptionTopics(): Array<string> {\n        const result : Array<string> = [];\n\n        for (let topic in this.subscriptions) {\n            if (this.subscriptions[topic].length) {\n                result.push(topic);\n            }\n        }\n\n        return result;\n    }\n\n    private addAllSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        this.removeAllSubscriptionListeners();\n\n        for (let topic in this.subscriptions) {\n            for (let listener of this.subscriptions[topic]) {\n                this.eventSource.addEventListener(topic, listener);\n            }\n        }\n    }\n\n    private removeAllSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        for (let topic in this.subscriptions) {\n            for (let listener of this.subscriptions[topic]) {\n                this.eventSource.removeEventListener(topic, listener);\n            }\n        }\n    }\n\n    private async connect(): Promise<void> {\n        if (this.reconnectAttempts > 0)  {\n            // immediately resolve the promise to avoid indefinitely\n            // blocking the client during reconnection\n            return;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.pendingConnects.push({ resolve, reject });\n\n            if (this.pendingConnects.length > 1) {\n                // all promises will be resolved once the connection is established\n                return;\n            }\n\n            this.initConnect();\n        })\n    }\n\n    private initConnect() {\n        this.disconnect(true);\n\n        // wait up to 15s for connect\n        clearTimeout(this.connectTimeoutId);\n        this.connectTimeoutId = setTimeout(() => {\n            this.connectErrorHandler(new Error(\"EventSource connect took too long.\"));\n        }, this.maxConnectTimeout);\n\n        this.eventSource = new EventSource(this.client.buildUrl('/api/realtime'))\n\n        this.eventSource.onerror = (_) => {\n            this.connectErrorHandler(new Error(\"Failed to establish realtime connection.\"));\n        };\n\n        this.eventSource.addEventListener('PB_CONNECT', (e) => {\n            const msgEvent = (e as MessageEvent);\n            this.clientId = msgEvent?.lastEventId;\n\n            this.submitSubscriptions()\n            .then(async () => {\n                let retries = 3;\n                while (this.hasUnsentSubscriptions() && retries > 0) {\n                    retries--;\n                    // resubscribe to ensure that the latest topics are submitted\n                    //\n                    // This is needed because missed topics could happen on reconnect\n                    // if after the pending sent `submitSubscriptions()` call another `subscribe()`\n                    // was made before the submit was able to complete.\n                    await this.submitSubscriptions();\n                }\n            }).then(() => {\n                for (let p of this.pendingConnects) {\n                    p.resolve();\n                }\n\n                // reset connect meta\n                this.pendingConnects = [];\n                this.reconnectAttempts = 0;\n                clearTimeout(this.reconnectTimeoutId);\n                clearTimeout(this.connectTimeoutId);\n            }).catch((err) => {\n                this.clientId = \"\";\n                this.connectErrorHandler(err);\n            });\n        });\n    }\n\n    private hasUnsentSubscriptions(): boolean {\n        const latestTopics = this.getNonEmptySubscriptionTopics();\n        if (latestTopics.length != this.lastSentTopics.length) {\n            return true;\n        }\n\n        for (const t of latestTopics) {\n            if (!this.lastSentTopics.includes(t)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private connectErrorHandler(err: any) {\n        clearTimeout(this.connectTimeoutId);\n        clearTimeout(this.reconnectTimeoutId);\n\n        if (\n            // wasn't previously connected -> direct reject\n            (!this.clientId && !this.reconnectAttempts) ||\n            // was previously connected but the max reconnection limit has been reached\n            this.reconnectAttempts > this.maxReconnectAttempts\n        ) {\n            for (let p of this.pendingConnects) {\n                p.reject(new ClientResponseError(err));\n            }\n            this.pendingConnects = [];\n            this.disconnect();\n            return;\n        }\n\n        // otherwise -> reconnect in the background\n        this.disconnect(true);\n        const timeout = this.predefinedReconnectIntervals[this.reconnectAttempts] || this.predefinedReconnectIntervals[this.predefinedReconnectIntervals.length - 1];\n        this.reconnectAttempts++;\n        this.reconnectTimeoutId = setTimeout(() => {\n            this.initConnect();\n        }, timeout);\n    }\n\n    private disconnect(fromReconnect = false): void {\n        clearTimeout(this.connectTimeoutId);\n        clearTimeout(this.reconnectTimeoutId);\n        this.removeAllSubscriptionListeners();\n        this.client.cancelRequest(this.getSubscriptionsCancelKey());\n        this.eventSource?.close();\n        this.eventSource = null;\n        this.clientId = \"\";\n\n        if (!fromReconnect) {\n            this.reconnectAttempts = 0;\n\n            // resolve any remaining connect promises\n            //\n            // this is done to avoid unnecessary throwing errors in case\n            // unsubscribe is called before the pending connect promises complete\n            // (see https://github.com/pocketbase/pocketbase/discussions/2897#discussioncomment-6423818)\n            for (let p of this.pendingConnects) {\n                p.resolve();\n            }\n            this.pendingConnects = [];\n        }\n    }\n}\n","import { BaseService }   from '@/services/utils/BaseService';\nimport { CommonOptions } from '@/services/utils/options';\n\nexport interface HealthCheckResponse {\n    code:    number;\n    message: string;\n    data:    {[key: string]: any};\n}\n\nexport class HealthService extends BaseService {\n    /**\n     * Checks the health status of the api.\n     */\n    check(options?: CommonOptions): Promise<HealthCheckResponse> {\n        options = Object.assign({\n            'method': 'GET',\n        }, options);\n\n        return this.client.send('/api/health', options);\n    }\n}\n","import { BaseService } from '@/services/utils/BaseService';\nimport { CommonOptions, FileOptions } from '@/services/utils/options';\n\nexport class FileService extends BaseService {\n    /**\n     * Builds and returns an absolute record file url for the provided filename.\n     */\n    getUrl(\n        record: Pick<{[key:string]:any}, \"id\" | \"collectionId\" | \"collectionName\">,\n        filename: string,\n        queryParams: FileOptions = {}\n    ): string {\n        const parts = [];\n        parts.push(\"api\")\n        parts.push(\"files\")\n        parts.push(encodeURIComponent(record.collectionId || record.collectionName))\n        parts.push(encodeURIComponent(record.id))\n        parts.push(encodeURIComponent(filename))\n\n        let result = this.client.buildUrl(parts.join('/'));\n\n        if (Object.keys(queryParams).length) {\n            // normalize the download query param for consistency with the Dart sdk\n            if (queryParams.download === false) {\n                delete(queryParams.download);\n            }\n\n            const params = new URLSearchParams(queryParams);\n\n            result += (result.includes(\"?\") ? \"&\" : \"?\") + params;\n        }\n\n        return result\n    }\n\n    /**\n     * Requests a new private file access token for the current auth model (admin or record).\n     */\n    getToken(options?: CommonOptions): Promise<string> {\n        options = Object.assign({\n            'method': 'POST',\n        }, options);\n\n        return this.client.send('/api/files/token', options)\n            .then((data) => data?.token || '');\n    }\n}\n","import { BaseService }   from '@/services/utils/BaseService';\nimport { CommonOptions } from '@/services/utils/options';\n\nexport interface BackupFileInfo {\n    key:      string;\n    size:     number;\n    modified: string;\n}\n\nexport class BackupService extends BaseService {\n    /**\n     * Returns list with all available backup files.\n     */\n    getFullList(options?: CommonOptions): Promise<Array<BackupFileInfo>> {\n        options = Object.assign({\n            'method': 'GET',\n        }, options);\n\n        return this.client.send('/api/backups', options);\n    }\n\n    /**\n     * Initializes a new backup.\n     */\n    create(basename: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign({\n            'method': 'POST',\n            'body':   {\n                'name': basename,\n            },\n        }, options);\n\n        return this.client.send('/api/backups', options)\n            .then(() => true);\n    }\n\n    /**\n     * Deletes a single backup file.\n     */\n    delete(key: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign({\n            'method': 'DELETE',\n        }, options);\n\n        return this.client.send(`/api/backups/${encodeURIComponent(key)}`, options)\n            .then(() => true);\n    }\n\n    /**\n     * Initializes an app data restore from an existing backup.\n     */\n    restore(key: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign({\n            'method': 'POST',\n        }, options);\n\n        return this.client.send(`/api/backups/${encodeURIComponent(key)}/restore`, options)\n            .then(() => true);\n    }\n\n    /**\n     * Builds a download url for a single existing backup using an\n     * admin file token and the backup file key.\n     *\n     * The file token can be generated via `pb.files.getToken()`.\n     */\n    getDownloadUrl(token: string, key: string): string {\n        return this.client.buildUrl(`/api/backups/${encodeURIComponent(key)}?token=${encodeURIComponent(token)}`);\n    }\n}\n","import { ClientResponseError }      from '@/ClientResponseError';\nimport { BaseAuthStore }            from '@/stores/BaseAuthStore';\nimport { LocalAuthStore }           from '@/stores/LocalAuthStore';\nimport { SettingsService }          from '@/services/SettingsService';\nimport { AdminService }             from '@/services/AdminService';\nimport { RecordService }            from '@/services/RecordService';\nimport { CollectionService }        from '@/services/CollectionService';\nimport { LogService }               from '@/services/LogService';\nimport { RealtimeService }          from '@/services/RealtimeService';\nimport { HealthService }            from '@/services/HealthService';\nimport { FileService }              from '@/services/FileService';\nimport { BackupService }            from '@/services/BackupService';\nimport { SendOptions, FileOptions } from '@/services/utils/options';\n\n// list of known SendOptions keys (everything else is treated as query param)\nconst knownSendOptionsKeys = [\n    'requestKey',\n    '$cancelKey',\n    '$autoCancel',\n    'fetch',\n    'headers',\n    'body',\n    'query',\n    'params',\n    // ---,\n    'cache',\n    'credentials',\n    'headers',\n    'integrity',\n    'keepalive',\n    'method',\n    'mode',\n    'redirect',\n    'referrer',\n    'referrerPolicy',\n    'signal',\n    'window',\n];\n\nexport interface BeforeSendResult {\n    [key:     string]: any, // for backward compatibility\n    url?:     string,\n    options?: {[key: string]: any}\n}\n\n/**\n * PocketBase JS Client.\n */\nexport default class Client {\n    /**\n     * The base PocketBase backend url address (eg. 'http://127.0.0.1.8090').\n     */\n    baseUrl: string;\n\n    /**\n     * Hook that get triggered right before sending the fetch request,\n     * allowing you to inspect and modify the url and request options.\n     *\n     * For list of the possible options check https://developer.mozilla.org/en-US/docs/Web/API/fetch#options\n     *\n     * You can return a non-empty result object `{ url, options }` to replace the url and request options entirely.\n     *\n     * Example:\n     * ```js\n     * client.beforeSend = function (url, options) {\n     *     options.headers = Object.assign({}, options.headers, {\n     *         'X-Custom-Header': 'example',\n     *     });\n     *\n     *     return { url, options }\n     * };\n     * ```\n     */\n    beforeSend?: (url: string, options: SendOptions) => BeforeSendResult|Promise<BeforeSendResult>;\n\n    /**\n     * Hook that get triggered after successfully sending the fetch request,\n     * allowing you to inspect/modify the response object and its parsed data.\n     *\n     * Returns the new Promise resolved `data` that will be returned to the client.\n     *\n     * Example:\n     * ```js\n     * client.afterSend = function (response, data) {\n     *     if (response.status != 200) {\n     *         throw new ClientResponseError({\n     *             url:      response.url,\n     *             status:   response.status,\n     *             data:     data,\n     *         });\n     *     }\n     *\n     *     return data;\n     * };\n     * ```\n     */\n    afterSend?: (response: Response, data: any) => any;\n\n    /**\n     * Optional language code (default to `en-US`) that will be sent\n     * with the requests to the server as `Accept-Language` header.\n     */\n    lang: string;\n\n    /**\n     * A replaceable instance of the local auth store service.\n     */\n    authStore: BaseAuthStore;\n\n    /**\n     * An instance of the service that handles the **Settings APIs**.\n     */\n    readonly settings: SettingsService;\n\n    /**\n     * An instance of the service that handles the **Admin APIs**.\n     */\n    readonly admins: AdminService;\n\n    /**\n     * An instance of the service that handles the **Collection APIs**.\n     */\n    readonly collections: CollectionService;\n\n    /**\n     * An instance of the service that handles the **File APIs**.\n     */\n    readonly files: FileService;\n\n    /**\n     * An instance of the service that handles the **Log APIs**.\n     */\n    readonly logs: LogService;\n\n    /**\n     * An instance of the service that handles the **Realtime APIs**.\n     */\n    readonly realtime: RealtimeService;\n\n    /**\n     * An instance of the service that handles the **Health APIs**.\n     */\n    readonly health: HealthService;\n\n    /**\n     * An instance of the service that handles the **Backup APIs**.\n     */\n    readonly backups: BackupService;\n\n    private cancelControllers: { [key: string]: AbortController } = {};\n    private recordServices: { [key: string]: RecordService } = {};\n    private enableAutoCancellation: boolean = true;\n\n    constructor(\n        baseUrl = '/',\n        authStore?: BaseAuthStore | null,\n        lang = 'en-US',\n    ) {\n        this.baseUrl   = baseUrl;\n        this.lang      = lang;\n        this.authStore = authStore || new LocalAuthStore();\n\n        // services\n        this.admins      = new AdminService(this);\n        this.collections = new CollectionService(this);\n        this.files       = new FileService(this);\n        this.logs        = new LogService(this);\n        this.settings    = new SettingsService(this);\n        this.realtime    = new RealtimeService(this);\n        this.health      = new HealthService(this);\n        this.backups     = new BackupService(this);\n    }\n\n    /**\n     * Returns the RecordService associated to the specified collection.\n     *\n     * @param  {string} idOrName\n     * @return {RecordService}\n     */\n    collection(idOrName: string): RecordService {\n        if (!this.recordServices[idOrName]) {\n            this.recordServices[idOrName] = new RecordService(this, idOrName);\n        }\n\n        return this.recordServices[idOrName];\n    }\n\n    /**\n     * Globally enable or disable auto cancellation for pending duplicated requests.\n     */\n    autoCancellation(enable: boolean): Client {\n        this.enableAutoCancellation = !!enable;\n\n        return this;\n    }\n\n    /**\n     * Cancels single request by its cancellation key.\n     */\n    cancelRequest(requestKey: string): Client {\n        if (this.cancelControllers[requestKey]) {\n            this.cancelControllers[requestKey].abort();\n            delete this.cancelControllers[requestKey];\n        }\n\n        return this;\n    }\n\n    /**\n     * Cancels all pending requests.\n     */\n    cancelAllRequests(): Client {\n        for (let k in this.cancelControllers) {\n            this.cancelControllers[k].abort();\n        }\n\n        this.cancelControllers = {};\n\n        return this;\n    }\n\n    /**\n     * Sends an api http request.\n     */\n    async send<T = any>(path: string, options: SendOptions): Promise<T> {\n        options = this.initSendOptions(options);\n\n        // requestKey normalizations for backward-compatibility\n        // ---\n        options.query = Object.assign({}, options.params, options.query);\n        if (typeof options.requestKey === 'undefined') {\n            if (options.$autoCancel === false || options.query.$autoCancel === false) {\n                options.requestKey = null;\n            } else if (options.$cancelKey || options.query.$cancelKey) {\n                options.requestKey = options.$cancelKey || options.query.$cancelKey;\n            }\n        }\n        // remove the deprecated special cancellation params from the other query params\n        delete options.$autoCancel;\n        delete options.query.$autoCancel;\n        delete options.$cancelKey;\n        delete options.query.$cancelKey;\n        // ---\n\n        // add the json header, if not explicitly set\n        // (for FormData body the Content-Type header should be skipped since the boundary is autogenerated)\n        if (\n            this.getHeader(options.headers, 'Content-Type') === null &&\n            !this.isFormData(options.body)\n        ) {\n            options.headers = Object.assign({}, options.headers, {\n                'Content-Type': 'application/json',\n            });\n        }\n\n        // add Accept-Language header, if not explicitly set\n        if (this.getHeader(options.headers, 'Accept-Language') === null) {\n            options.headers = Object.assign({}, options.headers, {\n                'Accept-Language': this.lang,\n            });\n        }\n\n        // check if Authorization header can be added\n        if (\n            // has stored token\n            this.authStore?.token &&\n            // auth header is not explicitly set\n            (this.getHeader(options.headers, 'Authorization') === null)\n        ) {\n            options.headers = Object.assign({}, options.headers, {\n                'Authorization': this.authStore.token,\n            });\n        }\n\n        // handle auto cancelation for duplicated pending request\n        if (this.enableAutoCancellation && options.requestKey !== null) {\n            const requestKey = options.requestKey || ((options.method || 'GET') + path);\n\n            // cancel previous pending requests\n            this.cancelRequest(requestKey);\n\n            const controller = new AbortController();\n            this.cancelControllers[requestKey] = controller;\n            options.signal = controller.signal;\n        }\n\n        // build url + path\n        let url = this.buildUrl(path);\n\n        // serialize the query parameters\n        if (typeof options.query !== 'undefined') {\n            const query = this.serializeQueryParams(options.query)\n            if (query) {\n                url += (url.includes('?') ? '&' : '?') + query;\n            }\n            delete options.query;\n        }\n\n        if (this.beforeSend) {\n            const result = Object.assign({}, await this.beforeSend(url, options));\n            if (typeof result.url !== 'undefined' || typeof result.options !== 'undefined') {\n                url = result.url || url;\n                options = result.options || options;\n            } else if (Object.keys(result).length) {\n                // legacy behavior\n                options = result as SendOptions;\n                console?.warn && console.warn('Deprecated format of beforeSend return: please use `return { url, options }`, instead of `return options`.');\n            }\n        }\n\n        // ensures that the json body is serialized\n        if (\n            this.getHeader(options.headers, 'Content-Type') == 'application/json' &&\n            options.body && typeof options.body !== 'string'\n        ) {\n            options.body = JSON.stringify(options.body);\n        }\n\n        const fetchFunc = options.fetch || fetch;\n\n        // send the request\n        return fetchFunc(url, options)\n            .then(async (response) => {\n                let data : any = {};\n\n                try {\n                    data = await response.json();\n                } catch (_) {\n                    // all api responses are expected to return json\n                    // with the exception of the realtime event and 204\n                }\n\n                if (this.afterSend) {\n                    data = await this.afterSend(response, data);\n                }\n\n                if (response.status >= 400) {\n                    throw new ClientResponseError({\n                        url:      response.url,\n                        status:   response.status,\n                        data:     data,\n                    });\n                }\n\n                return data as T;\n            }).catch((err) => {\n                // wrap to normalize all errors\n                throw new ClientResponseError(err);\n            });\n    }\n\n    /**\n     * Legacy alias of `pb.files.getUrl()`.\n     */\n    getFileUrl(\n        record: Pick<{[key:string]:any}, 'id' | 'collectionId' | 'collectionName'>,\n        filename: string,\n        queryParams: FileOptions = {}\n    ): string {\n        return this.files.getUrl(record, filename, queryParams);\n    }\n\n    /**\n     * Builds a full client url by safely concatenating the provided path.\n     */\n    buildUrl(path: string): string {\n        let url = this.baseUrl;\n\n        // construct an absolute base url if in a browser environment\n        if (\n            typeof window !== 'undefined' &&\n            !!window.location &&\n            !url.startsWith('https://') &&\n            !url.startsWith('http://')\n        ) {\n            url = window.location.origin?.endsWith('/') ?\n                window.location.origin.substring(0, window.location.origin.length - 1) :\n                (window.location.origin || '');\n\n            if (!this.baseUrl.startsWith('/')) {\n                url += window.location.pathname || '/';\n                url += url.endsWith('/') ? '' : '/';\n            }\n\n            url += this.baseUrl;\n        }\n\n        // concatenate the path\n        if (path) {\n            url += url.endsWith('/') ? '' : '/'; // append trailing slash if missing\n            url += path.startsWith('/') ? path.substring(1) : path;\n        }\n\n        return url;\n    }\n\n    private initSendOptions(options: SendOptions): SendOptions {\n        options = Object.assign({ method: 'GET' } as SendOptions, options)\n        options.query = options.query || {};\n\n        for (let key in options) {\n            if (knownSendOptionsKeys.includes(key)) {\n                continue\n            }\n\n            options.query[key] = options[key];\n            delete (options[key]);\n        }\n\n        // auto convert the body to FormData, if needed\n        options.body = this.convertToFormDataIfNeeded(options.body);\n\n        return options\n    }\n\n    /**\n     * Converts analyzes the provided body and converts it to FormData\n     * in case a POJO with File/Blob values is used.\n     */\n    private convertToFormDataIfNeeded(body: any): any {\n        if (\n            typeof FormData === 'undefined' ||\n            typeof body === \"undefined\" ||\n            typeof body !== \"object\" ||\n            body === null ||\n            this.isFormData(body) ||\n            !this.hasBlobField(body)\n        ) {\n            return body;\n        }\n\n        const form = new FormData();\n\n        for (let key in body) {\n            form.append(key, body[key]);\n        }\n\n        return form;\n    }\n\n    /**\n     * Checks if the submitted body object has at least one Blob/File field.\n     */\n    private hasBlobField(body: {[key:string]: any}): boolean {\n        for (let key in body) {\n            const values = Array.isArray(body[key]) ? body[key] : [body[key]];\n            for (let v of values) {\n                if (\n                    (typeof Blob !== 'undefined' && v instanceof Blob) ||\n                    (typeof File !== 'undefined' && v instanceof File)\n                ) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Extracts the header with the provided name in case-insensitive manner.\n     * Returns `null` if no header matching the name is found.\n     */\n    private getHeader(headers: {[key:string]:string}|undefined, name: string): string|null {\n        headers = headers || {};\n        name = name.toLowerCase();\n\n        for (let key in headers) {\n            if (key.toLowerCase() == name) {\n                return headers[key];\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Loosely checks if the specified body is a FormData instance.\n     */\n    private isFormData(body: any): boolean {\n        return body && (\n            // we are checking the constructor name because FormData\n            // is not available natively in some environments and the\n            // polyfill(s) may not be globally accessible\n            body.constructor.name === 'FormData' ||\n            // fallback to global FormData instance check\n            // note: this is needed because the constructor.name could be different in case of\n            //       custom global FormData implementation, eg. React Native on Android/iOS\n            (typeof FormData !== 'undefined' && body instanceof FormData)\n        )\n    }\n\n    /**\n     * Serializes the provided query parameters into a query string.\n     */\n    private serializeQueryParams(params: {[key: string]: any}): string {\n        const result: Array<string> = [];\n        for (const key in params) {\n            if (params[key] === null) {\n                // skip null query params\n                continue;\n            }\n\n            const value = params[key];\n            const encodedKey = encodeURIComponent(key);\n\n            if (Array.isArray(value)) {\n                // repeat array params\n                for (const v of value) {\n                    result.push(encodedKey + '=' + encodeURIComponent(v));\n                }\n            } else if (value instanceof Date) {\n                result.push(encodedKey + '=' + encodeURIComponent(value.toISOString()));\n            } else if (typeof value !== null && typeof value === 'object') {\n                result.push(encodedKey + '=' + encodeURIComponent(JSON.stringify(value)));\n            } else {\n                result.push(encodedKey + '=' + encodeURIComponent(value));\n            }\n        }\n\n        return result.join('&');\n    }\n}\n"],"names":["ClientResponseError","Error","constructor","errData","super","this","url","status","response","isAbort","originalError","Object","setPrototypeOf","prototype","data","DOMException","name","message","_a","_d","_c","_b","cause","includes","toJSON","assign","fieldContentRegExp","cookieSerialize","val","options","opt","encode","defaultEncode","test","TypeError","value","result","maxAge","isNaN","isFinite","Math","floor","domain","path","expires","isDate","toString","call","Date","valueOf","toUTCString","httpOnly","secure","priority","toLowerCase","sameSite","defaultDecode","indexOf","decodeURIComponent","encodeURIComponent","atobPolyfill","getTokenPayload","token","encodedPayload","split","map","c","charCodeAt","slice","join","JSON","parse","e","atob","input","str","String","replace","length","bs","buffer","bc","idx","output","charAt","fromCharCode","defaultCookieKey","BaseAuthStore","baseToken","baseModel","_onChangeCallbacks","model","isValid","isTokenExpired","expirationThreshold","payload","keys","exp","now","save","triggerChange","clear","loadFromCookie","cookie","key","rawData","cookieParse","decode","index","eqIdx","endIdx","lastIndexOf","trim","undefined","_","Array","isArray","exportToCookie","defaultOptions","stringify","resultLength","Blob","size","id","email","extraProps","prop","onChange","callback","fireImmediately","push","i","splice","LocalAuthStore","storageKey","storageFallback","_storageGet","_storageSet","_storageRemove","window","localStorage","rawValue","getItem","normalizedVal","setItem","removeItem","BaseService","client","SettingsService","getAll","method","send","update","bodyParams","body","testS3","filesystem","then","testEmail","toEmail","emailTemplate","template","generateAppleClientSecret","clientId","teamId","keyId","privateKey","duration","CrudService","getFullList","batchOrqueryParams","_getFullList","batch","getList","page","perPage","query","baseCrudPath","responseData","items","item","getFirstListItem","filter","requestKey","skipTotal","code","getOne","create","batchSize","request","__awaiter","list","concat","normalizeLegacyOptionsArgs","legacyWarn","baseOptions","bodyOrOptions","hasQuery","console","warn","AdminService","authStore","collectionId","delete","success","authResponse","admin","authWithPassword","password","identity","bind","authRefresh","requestPasswordReset","confirmPasswordReset","resetToken","passwordConfirm","RecordService","collectionIdOrName","baseCollectionPath","subscribeOne","recordId","realtime","subscribe","topicOrCallback","topic","unsubscribe","unsubscribeByPrefix","batchOrOptions","params","collectionName","record","listAuthMethods","usernamePassword","emailPassword","authProviders","usernameOrEmail","authWithOAuth2Code","provider","codeVerifier","redirectUrl","createData","authWithOAuth2","args","config","find","p","buildUrl","Promise","resolve","reject","oldState","state","scopes","urlCallback","authData","err","replacements","_replaceQueryParams","authUrl","_defaultUrlCallback","passwordResetToken","requestVerification","confirmVerification","verificationToken","requestEmailChange","newEmail","confirmEmailChange","emailChangeToken","listExternalAuths","unlinkExternalAuth","urlPath","substring","parsedParams","rawParams","param","pair","hasOwnProperty","open","width","height","windowWidth","innerWidth","windowHeight","innerHeight","left","top","CollectionService","import","collections","deleteMissing","LogService","getRequestsList","getRequest","getRequestsStats","RealtimeService","eventSource","subscriptions","lastSentTopics","maxConnectTimeout","reconnectAttempts","maxReconnectAttempts","Infinity","predefinedReconnectIntervals","pendingConnects","isConnected","listener","msgEvent","submitSubscriptions","addEventListener","connect","unsubscribeByTopicAndListener","hasSubscriptionListeners","removeEventListener","disconnect","topicPrefix","hasAtleastOneTopic","startsWith","exist","topicToCheck","addAllSubscriptionListeners","getNonEmptySubscriptionTopics","getSubscriptionsCancelKey","catch","removeAllSubscriptionListeners","initConnect","clearTimeout","connectTimeoutId","setTimeout","connectErrorHandler","EventSource","onerror","lastEventId","retries","hasUnsentSubscriptions","reconnectTimeoutId","latestTopics","t","timeout","fromReconnect","cancelRequest","close","HealthService","check","FileService","getUrl","filename","queryParams","parts","download","URLSearchParams","getToken","BackupService","basename","restore","getDownloadUrl","knownSendOptionsKeys","Client","baseUrl","lang","cancelControllers","recordServices","enableAutoCancellation","admins","files","logs","settings","health","backups","collection","idOrName","autoCancellation","enable","abort","cancelAllRequests","k","initSendOptions","$autoCancel","$cancelKey","getHeader","headers","isFormData","Authorization","controller","AbortController","signal","serializeQueryParams","beforeSend","fetch","json","afterSend","getFileUrl","location","origin","endsWith","pathname","convertToFormDataIfNeeded","FormData","hasBlobField","form","append","values","v","File","encodedKey","toISOString"],"mappings":"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"}